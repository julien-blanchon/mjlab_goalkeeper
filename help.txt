[INFO]: Parsing configuration from: mjlab_goalkeeper.config.env_cfg:UnitreeG1GoalkeeperEnvCfg
[INFO]: Parsing configuration from: mjlab_goalkeeper.config.rl_cfg:UnitreeG1PPORunnerCfg
usage: /home/ubuntu/goal_keeper_robot/mjlab_goalkeeper/.venv/bin/train 
Mjlab-Goalkeeper
       [-h] [MJLAB-GOALKEEPER OPTIONS]

╭─ options ──────────────────────────────────────────────────────────────────╮
│ -h, --help                                                                 │
│     show this help message and exit                                        │
│ --registry-name {None}|STR                                                 │
│     (default: None)                                                        │
│ --device STR                                                               │
│     (default: cuda:0)                                                      │
│ --video {True,False}                                                       │
│     (default: False)                                                       │
│ --video-length INT                                                         │
│     (default: 200)                                                         │
│ --video-interval INT                                                       │
│     (default: 2000)                                                        │
│ --enable-nan-guard {True,False}                                            │
│     (default: False)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env options ──────────────────────────────────────────────────────────────╮
│ Configuration for Unitree G1 robot on flat terrain.                        │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.decimation INT                                                       │
│                                                                            │
│     50 Hz control frequency. (default: 4)                                  │
│ --env.seed {None}|INT                                                      │
│     (default: None)                                                        │
│ --env.episode-length-s FLOAT                                               │
│     (default: 20.0)                                                        │
│ --env.is-finite-horizon {True,False}                                       │
│     (default: False)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene options ────────────────────────────────────────────────────────╮
│ --env.scene.num-envs INT                                                   │
│     (default: 1)                                                           │
│ --env.scene.env-spacing FLOAT                                              │
│     (default: 2.0)                                                         │
│ --env.scene.extent {None}|FLOAT                                            │
│     (default: 2.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.terrain options ────────────────────────────────────────────────╮
│ Configuration for terrain import and environment placement.                │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.terrain.terrain-type {generator,plane}                         │
│     Type of terrain to generate. "generator" uses procedural terrain with  │
│     sub-terrain grid, "plane" creates a flat ground plane. (default:       │
│     plane)                                                                 │
│ --env.scene.terrain.env-spacing {None}|FLOAT                               │
│     Distance between environment origins when using grid layout. Required  │
│     for                                                                    │
│     "plane" terrain or when no sub-terrain origins exist. (default: 2.0)   │
│ --env.scene.terrain.max-init-terrain-level {None}|INT                      │
│     Maximum initial difficulty level (row index) for environment placement │
│     in                                                                     │
│     curriculum mode. None uses all available rows. (default: 5)            │
│ --env.scene.terrain.num-envs INT                                           │
│     Number of parallel environments to create. This will get overriden by  │
│     the                                                                    │
│     scene configuration if specified there. (default: 1)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot options ─────────────────────────────────────────╮
│ --env.scene.entities.robot.spec-fn {fixed}                                 │
│     (fixed to: <function get_spec at 0x73d3c3daafc0>)                      │
│ --env.scene.entities.robot.debug-vis {True,False}                          │
│     Misc. (default: False)                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.init-state options ──────────────────────────────╮
│ --env.scene.entities.robot.init-state.pos FLOAT FLOAT FLOAT                │
│     Root position and orientation. (default: 0 0 0.76)                     │
│ --env.scene.entities.robot.init-state.rot FLOAT FLOAT FLOAT FLOAT          │
│     Root position and orientation. (default: 1.0 0.0 0.0 0.0)              │
│ --env.scene.entities.robot.init-state.lin-vel FLOAT FLOAT FLOAT            │
│     Root linear and angular velocity (only for floating base entities).    │
│     (default: 0.0 0.0 0.0)                                                 │
│ --env.scene.entities.robot.init-state.ang-vel FLOAT FLOAT FLOAT            │
│     Root linear and angular velocity (only for floating base entities).    │
│     (default: 0.0 0.0 0.0)                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.init-state.joint-pos options ────────────────────╮
│ Articulation (only for articulated entities).                              │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.entities.robot.init-state.joint-pos.*-hip-pitch-joint FLOAT    │
│     (default: -0.312)                                                      │
│ --env.scene.entities.robot.init-state.joint-pos.*-knee-joint FLOAT         │
│     (default: 0.669)                                                       │
│ --env.scene.entities.robot.init-state.joint-pos.*-ankle-pitch-joint FLOAT  │
│     (default: -0.363)                                                      │
│ --env.scene.entities.robot.init-state.joint-pos.*-elbow-joint FLOAT        │
│     (default: 0.6)                                                         │
│ --env.scene.entities.robot.init-state.joint-pos.left-shoulder-roll-joint   │
│ FLOAT                                                                      │
│     (default: 0.2)                                                         │
│ --env.scene.entities.robot.init-state.joint-pos.left-shoulder-pitch-joint  │
│ FLOAT                                                                      │
│     (default: 0.2)                                                         │
│ --env.scene.entities.robot.init-state.joint-pos.right-shoulder-roll-joint  │
│ FLOAT                                                                      │
│     (default: -0.2)                                                        │
│ --env.scene.entities.robot.init-state.joint-pos.right-shoulder-pitch-joint │
│ FLOAT                                                                      │
│     (default: 0.2)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.init-state.joint-vel options ────────────────────╮
│ Articulation (only for articulated entities).                              │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.entities.robot.init-state.joint-vel.* FLOAT                    │
│     (default: 0.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation options ────────────────────────────╮
│ --env.scene.entities.robot.articulation.soft-joint-pos-limit-factor FLOAT  │
│     (default: 0.9)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation.actuators.0 options ────────────────╮
│ --env.scene.entities.robot.articulation.actuators.0.joint-names-expr [STR  │
│ [STR ...]]                                                                 │
│     List of regex patterns to match joint names. (default:                 │
│     '.*_elbow_joint' '.*_shoulder_pitch_joint' '.*_shoulder_roll_joint'    │
│     '.*_shoulder_yaw_joint' '.*_wrist_roll_joint')                         │
│ --env.scene.entities.robot.articulation.actuators.0.effort-limit FLOAT     │
│     Maximum force/torque the actuator can apply (must be positive).        │
│     (default: 25.0)                                                        │
│ --env.scene.entities.robot.articulation.actuators.0.stiffness FLOAT        │
│     Position gain (P-gain) for PD control (must be non-negative).          │
│     (default: 14.25062309787429)                                           │
│ --env.scene.entities.robot.articulation.actuators.0.damping FLOAT          │
│     Velocity gain (D-gain) for PD control (must be non-negative).          │
│     (default: 0.907222843292423)                                           │
│ --env.scene.entities.robot.articulation.actuators.0.frictionloss FLOAT     │
│     Joint friction loss coefficient (must be non-negative). (default: 0.0) │
│ --env.scene.entities.robot.articulation.actuators.0.armature FLOAT         │
│     Rotor inertia or reflected inertia for the joint (must be              │
│     non-negative). (default: 0.003609725)                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation.actuators.1 options ────────────────╮
│ --env.scene.entities.robot.articulation.actuators.1.joint-names-expr [STR  │
│ [STR ...]]                                                                 │
│     List of regex patterns to match joint names. (default:                 │
│     '.*_hip_pitch_joint' '.*_hip_yaw_joint' waist_yaw_joint)               │
│ --env.scene.entities.robot.articulation.actuators.1.effort-limit FLOAT     │
│     Maximum force/torque the actuator can apply (must be positive).        │
│     (default: 88.0)                                                        │
│ --env.scene.entities.robot.articulation.actuators.1.stiffness FLOAT        │
│     Position gain (P-gain) for PD control (must be non-negative).          │
│     (default: 40.17923863450712)                                           │
│ --env.scene.entities.robot.articulation.actuators.1.damping FLOAT          │
│     Velocity gain (D-gain) for PD control (must be non-negative).          │
│     (default: 2.557889775413375)                                           │
│ --env.scene.entities.robot.articulation.actuators.1.frictionloss FLOAT     │
│     Joint friction loss coefficient (must be non-negative). (default: 0.0) │
│ --env.scene.entities.robot.articulation.actuators.1.armature FLOAT         │
│     Rotor inertia or reflected inertia for the joint (must be              │
│     non-negative). (default: 0.01017752004132231)                          │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation.actuators.2 options ────────────────╮
│ --env.scene.entities.robot.articulation.actuators.2.joint-names-expr [STR  │
│ [STR ...]]                                                                 │
│     List of regex patterns to match joint names. (default:                 │
│     '.*_hip_roll_joint' '.*_knee_joint')                                   │
│ --env.scene.entities.robot.articulation.actuators.2.effort-limit FLOAT     │
│     Maximum force/torque the actuator can apply (must be positive).        │
│     (default: 139.0)                                                       │
│ --env.scene.entities.robot.articulation.actuators.2.stiffness FLOAT        │
│     Position gain (P-gain) for PD control (must be non-negative).          │
│     (default: 99.09842777666111)                                           │
│ --env.scene.entities.robot.articulation.actuators.2.damping FLOAT          │
│     Velocity gain (D-gain) for PD control (must be non-negative).          │
│     (default: 6.308801853496639)                                           │
│ --env.scene.entities.robot.articulation.actuators.2.frictionloss FLOAT     │
│     Joint friction loss coefficient (must be non-negative). (default: 0.0) │
│ --env.scene.entities.robot.articulation.actuators.2.armature FLOAT         │
│     Rotor inertia or reflected inertia for the joint (must be              │
│     non-negative). (default: 0.025101924999999997)                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation.actuators.3 options ────────────────╮
│ --env.scene.entities.robot.articulation.actuators.3.joint-names-expr [STR  │
│ [STR ...]]                                                                 │
│     List of regex patterns to match joint names. (default:                 │
│     '.*_wrist_pitch_joint' '.*_wrist_yaw_joint')                           │
│ --env.scene.entities.robot.articulation.actuators.3.effort-limit FLOAT     │
│     Maximum force/torque the actuator can apply (must be positive).        │
│     (default: 5.0)                                                         │
│ --env.scene.entities.robot.articulation.actuators.3.stiffness FLOAT        │
│     Position gain (P-gain) for PD control (must be non-negative).          │
│     (default: 16.77832748089279)                                           │
│ --env.scene.entities.robot.articulation.actuators.3.damping FLOAT          │
│     Velocity gain (D-gain) for PD control (must be non-negative).          │
│     (default: 1.06814150219)                                               │
│ --env.scene.entities.robot.articulation.actuators.3.frictionloss FLOAT     │
│     Joint friction loss coefficient (must be non-negative). (default: 0.0) │
│ --env.scene.entities.robot.articulation.actuators.3.armature FLOAT         │
│     Rotor inertia or reflected inertia for the joint (must be              │
│     non-negative). (default: 0.00425)                                      │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation.actuators.4 options ────────────────╮
│ --env.scene.entities.robot.articulation.actuators.4.joint-names-expr [STR  │
│ [STR ...]]                                                                 │
│     List of regex patterns to match joint names. (default:                 │
│     waist_pitch_joint waist_roll_joint)                                    │
│ --env.scene.entities.robot.articulation.actuators.4.effort-limit FLOAT     │
│     Maximum force/torque the actuator can apply (must be positive).        │
│     (default: 50.0)                                                        │
│ --env.scene.entities.robot.articulation.actuators.4.stiffness FLOAT        │
│     Position gain (P-gain) for PD control (must be non-negative).          │
│     (default: 28.50124619574858)                                           │
│ --env.scene.entities.robot.articulation.actuators.4.damping FLOAT          │
│     Velocity gain (D-gain) for PD control (must be non-negative).          │
│     (default: 1.814445686584846)                                           │
│ --env.scene.entities.robot.articulation.actuators.4.frictionloss FLOAT     │
│     Joint friction loss coefficient (must be non-negative). (default: 0.0) │
│ --env.scene.entities.robot.articulation.actuators.4.armature FLOAT         │
│     Rotor inertia or reflected inertia for the joint (must be              │
│     non-negative). (default: 0.00721945)                                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.articulation.actuators.5 options ────────────────╮
│ --env.scene.entities.robot.articulation.actuators.5.joint-names-expr [STR  │
│ [STR ...]]                                                                 │
│     List of regex patterns to match joint names. (default:                 │
│     '.*_ankle_pitch_joint' '.*_ankle_roll_joint')                          │
│ --env.scene.entities.robot.articulation.actuators.5.effort-limit FLOAT     │
│     Maximum force/torque the actuator can apply (must be positive).        │
│     (default: 50.0)                                                        │
│ --env.scene.entities.robot.articulation.actuators.5.stiffness FLOAT        │
│     Position gain (P-gain) for PD control (must be non-negative).          │
│     (default: 28.50124619574858)                                           │
│ --env.scene.entities.robot.articulation.actuators.5.damping FLOAT          │
│     Velocity gain (D-gain) for PD control (must be non-negative).          │
│     (default: 1.814445686584846)                                           │
│ --env.scene.entities.robot.articulation.actuators.5.frictionloss FLOAT     │
│     Joint friction loss coefficient (must be non-negative). (default: 0.0) │
│ --env.scene.entities.robot.articulation.actuators.5.armature FLOAT         │
│     Rotor inertia or reflected inertia for the joint (must be              │
│     non-negative). (default: 0.00721945)                                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.sensors.0 options ───────────────────────────────╮
│ --env.scene.entities.robot.sensors.0.name STR                              │
│     Name of the sensor. (default: left_foot_ground_contact)                │
│ --env.scene.entities.robot.sensors.0.geom1 {None}|STR                      │
│     Primary geom name (exactly one primary object must be specified).      │
│     (default: None)                                                        │
│ --env.scene.entities.robot.sensors.0.body1 {None}|STR                      │
│     Primary body name (exactly one primary object must be specified).      │
│     (default: left_ankle_roll_link)                                        │
│ --env.scene.entities.robot.sensors.0.subtree1 {None}|STR                   │
│     Primary subtree name (exactly one primary object must be specified).   │
│     (default: None)                                                        │
│ --env.scene.entities.robot.sensors.0.site {None}|STR                       │
│     Site volume (exactly one primary object must be specified, requires    │
│     secondary object). (default: None)                                     │
│ --env.scene.entities.robot.sensors.0.geom2 {None}|STR                      │
│     Secondary geom name (optional). (default: None)                        │
│ --env.scene.entities.robot.sensors.0.body2 {None}|STR                      │
│     Secondary body name (optional). (default: terrain)                     │
│ --env.scene.entities.robot.sensors.0.subtree2 {None}|STR                   │
│     Secondary subtree name (optional). (default: None)                     │
│ --env.scene.entities.robot.sensors.0.num INT                               │
│     Max contacts to track (default: 1). (default: 1)                       │
│ --env.scene.entities.robot.sensors.0.data                                  │
│ [{found,force,torque,dist,pos,normal,tangent} [...]]                       │
│     Data to extract. (default: found)                                      │
│ --env.scene.entities.robot.sensors.0.reduce                                │
│ {none,mindist,maxforce,netforce}                                           │
│     How to combine. (default: netforce)                                    │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.sensors.1 options ───────────────────────────────╮
│ --env.scene.entities.robot.sensors.1.name STR                              │
│     Name of the sensor. (default: right_foot_ground_contact)               │
│ --env.scene.entities.robot.sensors.1.geom1 {None}|STR                      │
│     Primary geom name (exactly one primary object must be specified).      │
│     (default: None)                                                        │
│ --env.scene.entities.robot.sensors.1.body1 {None}|STR                      │
│     Primary body name (exactly one primary object must be specified).      │
│     (default: right_ankle_roll_link)                                       │
│ --env.scene.entities.robot.sensors.1.subtree1 {None}|STR                   │
│     Primary subtree name (exactly one primary object must be specified).   │
│     (default: None)                                                        │
│ --env.scene.entities.robot.sensors.1.site {None}|STR                       │
│     Site volume (exactly one primary object must be specified, requires    │
│     secondary object). (default: None)                                     │
│ --env.scene.entities.robot.sensors.1.geom2 {None}|STR                      │
│     Secondary geom name (optional). (default: None)                        │
│ --env.scene.entities.robot.sensors.1.body2 {None}|STR                      │
│     Secondary body name (optional). (default: terrain)                     │
│ --env.scene.entities.robot.sensors.1.subtree2 {None}|STR                   │
│     Secondary subtree name (optional). (default: None)                     │
│ --env.scene.entities.robot.sensors.1.num INT                               │
│     Max contacts to track (default: 1). (default: 1)                       │
│ --env.scene.entities.robot.sensors.1.data                                  │
│ [{found,force,torque,dist,pos,normal,tangent} [...]]                       │
│     Data to extract. (default: found)                                      │
│ --env.scene.entities.robot.sensors.1.reduce                                │
│ {none,mindist,maxforce,netforce}                                           │
│     How to combine. (default: netforce)                                    │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.robot.collisions.0 options ────────────────────────────╮
│ --env.scene.entities.robot.collisions.0.geom-names-expr [STR [STR ...]]    │
│     List of regex patterns to match geom names. (default: '.*_collision')  │
│ --env.scene.entities.robot.collisions.0.contype INT|{[STR INT [STR INT     │
│ ...]]}                                                                     │
│     Collision type (int or dict mapping patterns to values). Must be       │
│     non-negative. (default: 1)                                             │
│ --env.scene.entities.robot.collisions.0.conaffinity INT|{[STR INT [STR INT │
│ ...]]}                                                                     │
│     Collision affinity (int or dict mapping patterns to values). Must be   │
│     non-negative. (default: 1)                                             │
│ --env.scene.entities.robot.collisions.0.condim INT|{[STR INT [STR INT      │
│ ...]]}                                                                     │
│     Contact dimension (int or dict mapping patterns to values). Must be    │
│     one                                                                    │
│     of {1, 3, 4, 6}. (default: '^(left|right)_foot[1-7]_collision$' 3      │
│     '.*_collision' 1)                                                      │
│ --env.scene.entities.robot.collisions.0.priority INT|{[STR INT [STR INT    │
│ ...]]}                                                                     │
│     Collision priority (int or dict mapping patterns to values). Must be   │
│     non-negative. (default: '^(left|right)_foot[1-7]_collision$' 1)        │
│ --env.scene.entities.robot.collisions.0.friction {None}|{[FLOAT [FLOAT     │
│ ...]]}|{[STR [FLOAT [FLOAT ...]] [STR [FLOAT [FLOAT ...]] ...]]}           │
│     Friction coefficients as tuple or dict mapping patterns to tuples.     │
│     (default: '^(left|right)_foot[1-7]_collision$' 0.6)                    │
│ --env.scene.entities.robot.collisions.0.solref {None}|{[FLOAT [FLOAT       │
│ ...]]}|{[STR [FLOAT [FLOAT ...]] [STR [FLOAT [FLOAT ...]] ...]]}           │
│     Solver reference parameters as tuple or dict mapping patterns to       │
│     tuples. (default: None)                                                │
│ --env.scene.entities.robot.collisions.0.solimp {None}|{[FLOAT [FLOAT       │
│ ...]]}|{[STR [FLOAT [FLOAT ...]] [STR [FLOAT [FLOAT ...]] ...]]}           │
│     Solver impedance parameters as tuple or dict mapping patterns to       │
│     tuples. (default: None)                                                │
│ --env.scene.entities.robot.collisions.0.disable-other-geoms {True,False}   │
│     Whether to disable collision for non-matching geoms. (default: True)   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.football-ball options ─────────────────────────────────╮
│ --env.scene.entities.football-ball.spec-fn {fixed}                         │
│     (fixed to: <function create_football_ball_spec at 0x73d3c3dfb880>)     │
│ --env.scene.entities.football-ball.debug-vis {True,False}                  │
│     Misc. (default: False)                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.football-ball.init-state options ──────────────────────╮
│ --env.scene.entities.football-ball.init-state.pos FLOAT FLOAT FLOAT        │
│     Root position and orientation. (default: 0.0 10.5 0.11)                │
│ --env.scene.entities.football-ball.init-state.rot FLOAT FLOAT FLOAT FLOAT  │
│     Root position and orientation. (default: 1.0 0.0 0.0 0.0)              │
│ --env.scene.entities.football-ball.init-state.lin-vel FLOAT FLOAT FLOAT    │
│     Root linear and angular velocity (only for floating base entities).    │
│     (default: 0.0 0.0 0.0)                                                 │
│ --env.scene.entities.football-ball.init-state.ang-vel FLOAT FLOAT FLOAT    │
│     Root linear and angular velocity (only for floating base entities).    │
│     (default: 0.0 0.0 0.0)                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.football-ball.init-state.joint-pos options ────────────╮
│ Articulation (only for articulated entities).                              │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.entities.football-ball.init-state.joint-pos.* FLOAT            │
│     (default: 0.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.football-ball.init-state.joint-vel options ────────────╮
│ Articulation (only for articulated entities).                              │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.entities.football-ball.init-state.joint-vel.* FLOAT            │
│     (default: 0.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.goal options ──────────────────────────────────────────╮
│ --env.scene.entities.goal.spec-fn {fixed}                                  │
│     (fixed to: <function create_goal_spec at 0x73d3c3dfbb00>)              │
│ --env.scene.entities.goal.debug-vis {True,False}                           │
│     Misc. (default: False)                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.goal.init-state options ───────────────────────────────╮
│ --env.scene.entities.goal.init-state.pos FLOAT FLOAT FLOAT                 │
│     Root position and orientation. (default: 0.0 -0.5 0.0)                 │
│ --env.scene.entities.goal.init-state.rot FLOAT FLOAT FLOAT FLOAT           │
│     Root position and orientation. (default: 1.0 0.0 0.0 0.0)              │
│ --env.scene.entities.goal.init-state.lin-vel FLOAT FLOAT FLOAT             │
│     Root linear and angular velocity (only for floating base entities).    │
│     (default: 0.0 0.0 0.0)                                                 │
│ --env.scene.entities.goal.init-state.ang-vel FLOAT FLOAT FLOAT             │
│     Root linear and angular velocity (only for floating base entities).    │
│     (default: 0.0 0.0 0.0)                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.goal.init-state.joint-pos options ─────────────────────╮
│ Articulation (only for articulated entities).                              │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.entities.goal.init-state.joint-pos.* FLOAT                     │
│     (default: 0.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.scene.entities.goal.init-state.joint-vel options ─────────────────────╮
│ Articulation (only for articulated entities).                              │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.scene.entities.goal.init-state.joint-vel.* FLOAT                     │
│     (default: 0.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy options ──────────────────────────────────────────╮
│ --env.observations.policy.concatenate-terms {True,False}                   │
│     (default: True)                                                        │
│ --env.observations.policy.concatenate-dim INT                              │
│     (default: -1)                                                          │
│ --env.observations.policy.enable-corruption {True,False}                   │
│     (default: True)                                                        │
│ --env.observations.policy.history-length {None}|INT                        │
│     (default: None)                                                        │
│ --env.observations.policy.flatten-history-dim {True,False}                 │
│     (default: True)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.base-lin-vel options ─────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.base-lin-vel.func {fixed}                        │
│     (fixed to: <function base_lin_vel at 0x73d3ce9e82c0>)                  │
│ --env.observations.policy.base-lin-vel.params {fixed}                      │
│     (fixed to: {})                                                         │
│ --env.observations.policy.base-lin-vel.clip {None}|{FLOAT FLOAT}           │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.base-lin-vel.scale {fixed}                       │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.base-lin-vel.delay-min-lag INT                   │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.base-lin-vel.delay-max-lag INT                   │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.base-lin-vel.delay-per-env {True,False}          │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.base-lin-vel.delay-hold-prob FLOAT               │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.base-lin-vel.delay-update-period INT             │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.base-lin-vel.delay-per-env-phase {True,False}    │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.base-lin-vel.history-length INT                  │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.base-lin-vel.flatten-history-dim {True,False}    │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.base-lin-vel.noise options ───────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.base-lin-vel.noise.operation {add,scale,abs}     │
│     (default: add)                                                         │
│ --env.observations.policy.base-lin-vel.noise.n-min {fixed}                 │
│     (fixed to: -0.1)                                                       │
│ --env.observations.policy.base-lin-vel.noise.n-max {fixed}                 │
│     (fixed to: 0.1)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.base-ang-vel options ─────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.base-ang-vel.func {fixed}                        │
│     (fixed to: <function base_ang_vel at 0x73d3ce9e8360>)                  │
│ --env.observations.policy.base-ang-vel.params {fixed}                      │
│     (fixed to: {})                                                         │
│ --env.observations.policy.base-ang-vel.clip {None}|{FLOAT FLOAT}           │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.base-ang-vel.scale {fixed}                       │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.base-ang-vel.delay-min-lag INT                   │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.base-ang-vel.delay-max-lag INT                   │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.base-ang-vel.delay-per-env {True,False}          │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.base-ang-vel.delay-hold-prob FLOAT               │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.base-ang-vel.delay-update-period INT             │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.base-ang-vel.delay-per-env-phase {True,False}    │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.base-ang-vel.history-length INT                  │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.base-ang-vel.flatten-history-dim {True,False}    │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.base-ang-vel.noise options ───────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.base-ang-vel.noise.operation {add,scale,abs}     │
│     (default: add)                                                         │
│ --env.observations.policy.base-ang-vel.noise.n-min {fixed}                 │
│     (fixed to: -0.2)                                                       │
│ --env.observations.policy.base-ang-vel.noise.n-max {fixed}                 │
│     (fixed to: 0.2)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.projected-gravity options ────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.projected-gravity.func {fixed}                   │
│     (fixed to: <function projected_gravity at 0x73d3ce9e8400>)             │
│ --env.observations.policy.projected-gravity.params {fixed}                 │
│     (fixed to: {})                                                         │
│ --env.observations.policy.projected-gravity.clip {None}|{FLOAT FLOAT}      │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.projected-gravity.scale {fixed}                  │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.projected-gravity.delay-min-lag INT              │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.projected-gravity.delay-max-lag INT              │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.projected-gravity.delay-per-env {True,False}     │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.projected-gravity.delay-hold-prob FLOAT          │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.projected-gravity.delay-update-period INT        │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.projected-gravity.delay-per-env-phase            │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.projected-gravity.history-length INT             │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.projected-gravity.flatten-history-dim            │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.projected-gravity.noise options ──────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.projected-gravity.noise.operation                │
│ {add,scale,abs}                                                            │
│     (default: add)                                                         │
│ --env.observations.policy.projected-gravity.noise.n-min {fixed}            │
│     (fixed to: -0.05)                                                      │
│ --env.observations.policy.projected-gravity.noise.n-max {fixed}            │
│     (fixed to: 0.05)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.joint-pos options ────────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.joint-pos.func {fixed}                           │
│     (fixed to: <function joint_pos_rel at 0x73d3ce9e84a0>)                 │
│ --env.observations.policy.joint-pos.params {fixed}                         │
│     (fixed to: {})                                                         │
│ --env.observations.policy.joint-pos.clip {None}|{FLOAT FLOAT}              │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.joint-pos.scale {fixed}                          │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.joint-pos.delay-min-lag INT                      │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.joint-pos.delay-max-lag INT                      │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.joint-pos.delay-per-env {True,False}             │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.joint-pos.delay-hold-prob FLOAT                  │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.joint-pos.delay-update-period INT                │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.joint-pos.delay-per-env-phase {True,False}       │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.joint-pos.history-length INT                     │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.joint-pos.flatten-history-dim {True,False}       │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.joint-pos.noise options ──────────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.joint-pos.noise.operation {add,scale,abs}        │
│     (default: add)                                                         │
│ --env.observations.policy.joint-pos.noise.n-min {fixed}                    │
│     (fixed to: -0.01)                                                      │
│ --env.observations.policy.joint-pos.noise.n-max {fixed}                    │
│     (fixed to: 0.01)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.joint-vel options ────────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.joint-vel.func {fixed}                           │
│     (fixed to: <function joint_vel_rel at 0x73d3ce9e8540>)                 │
│ --env.observations.policy.joint-vel.params {fixed}                         │
│     (fixed to: {})                                                         │
│ --env.observations.policy.joint-vel.clip {None}|{FLOAT FLOAT}              │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.joint-vel.scale {fixed}                          │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.joint-vel.delay-min-lag INT                      │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.joint-vel.delay-max-lag INT                      │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.joint-vel.delay-per-env {True,False}             │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.joint-vel.delay-hold-prob FLOAT                  │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.joint-vel.delay-update-period INT                │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.joint-vel.delay-per-env-phase {True,False}       │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.joint-vel.history-length INT                     │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.joint-vel.flatten-history-dim {True,False}       │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.joint-vel.noise options ──────────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.joint-vel.noise.operation {add,scale,abs}        │
│     (default: add)                                                         │
│ --env.observations.policy.joint-vel.noise.n-min {fixed}                    │
│     (fixed to: -1.5)                                                       │
│ --env.observations.policy.joint-vel.noise.n-max {fixed}                    │
│     (fixed to: 1.5)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.actions options ──────────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.actions.func {fixed}                             │
│     (fixed to: <function last_action at 0x73d3ce9e85e0>)                   │
│ --env.observations.policy.actions.params {fixed}                           │
│     (fixed to: {})                                                         │
│ --env.observations.policy.actions.clip {None}|{FLOAT FLOAT}                │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.actions.scale {fixed}                            │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.actions.delay-min-lag INT                        │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.actions.delay-max-lag INT                        │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.actions.delay-per-env {True,False}               │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.actions.delay-hold-prob FLOAT                    │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.actions.delay-update-period INT                  │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.actions.delay-per-env-phase {True,False}         │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.actions.history-length INT                       │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.actions.flatten-history-dim {True,False}         │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.football-position options ────────────────────────╮
│ Football observations (primary ball for goalkeeper training) Add small     │
│ noise for robustness (simulates vision system uncertainty)                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.football-position.func {fixed}                   │
│     (fixed to: <function entity_position at 0x73d3c3dfa480>)               │
│ --env.observations.policy.football-position.clip {None}|{FLOAT FLOAT}      │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.football-position.scale {fixed}                  │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.football-position.delay-min-lag INT              │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.football-position.delay-max-lag INT              │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.football-position.delay-per-env {True,False}     │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.football-position.delay-hold-prob FLOAT          │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.football-position.delay-update-period INT        │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.football-position.delay-per-env-phase            │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.football-position.history-length INT             │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.football-position.flatten-history-dim            │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.football-position.params.asset-cfg options ───────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.football-position.params.asset-cfg.name STR      │
│     The name of the entity in the scene. (default: football_ball)          │
│ --env.observations.policy.football-position.params.asset-cfg.joint-names   │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of joints to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.policy.football-position.params.asset-cfg.joint-ids     │
│ {fixed}                                                                    │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-position.params.asset-cfg.body-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.policy.football-position.params.asset-cfg.body-ids      │
│ {fixed}                                                                    │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-position.params.asset-cfg.geom-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.observations.policy.football-position.params.asset-cfg.geom-ids      │
│ {fixed}                                                                    │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-position.params.asset-cfg.site-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.observations.policy.football-position.params.asset-cfg.site-ids      │
│ {fixed}                                                                    │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-position.params.asset-cfg.preserve-orde │
│ r {True,False}                                                             │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.football-position.noise options ──────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.football-position.noise.operation                │
│ {add,scale,abs}                                                            │
│     (default: add)                                                         │
│ --env.observations.policy.football-position.noise.n-min {fixed}            │
│     (fixed to: -0.02)                                                      │
│ --env.observations.policy.football-position.noise.n-max {fixed}            │
│     (fixed to: 0.02)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.football-velocity options ────────────────────────╮
│ Football observations (primary ball for goalkeeper training) Add small     │
│ noise for robustness (simulates vision system uncertainty)                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.football-velocity.func {fixed}                   │
│     (fixed to: <function entity_velocity at 0x73d3c3dfa520>)               │
│ --env.observations.policy.football-velocity.clip {None}|{FLOAT FLOAT}      │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.football-velocity.scale {fixed}                  │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.football-velocity.delay-min-lag INT              │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.football-velocity.delay-max-lag INT              │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.football-velocity.delay-per-env {True,False}     │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.football-velocity.delay-hold-prob FLOAT          │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.football-velocity.delay-update-period INT        │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.football-velocity.delay-per-env-phase            │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.football-velocity.history-length INT             │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.football-velocity.flatten-history-dim            │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.football-velocity.params.asset-cfg options ───────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.football-velocity.params.asset-cfg.name STR      │
│     The name of the entity in the scene. (default: football_ball)          │
│ --env.observations.policy.football-velocity.params.asset-cfg.joint-names   │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of joints to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.policy.football-velocity.params.asset-cfg.joint-ids     │
│ {fixed}                                                                    │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-velocity.params.asset-cfg.body-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.policy.football-velocity.params.asset-cfg.body-ids      │
│ {fixed}                                                                    │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-velocity.params.asset-cfg.geom-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.observations.policy.football-velocity.params.asset-cfg.geom-ids      │
│ {fixed}                                                                    │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-velocity.params.asset-cfg.site-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.observations.policy.football-velocity.params.asset-cfg.site-ids      │
│ {fixed}                                                                    │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.observations.policy.football-velocity.params.asset-cfg.preserve-orde │
│ r {True,False}                                                             │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.football-velocity.noise options ──────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.football-velocity.noise.operation                │
│ {add,scale,abs}                                                            │
│     (default: add)                                                         │
│ --env.observations.policy.football-velocity.noise.n-min {fixed}            │
│     (fixed to: -0.05)                                                      │
│ --env.observations.policy.football-velocity.noise.n-max {fixed}            │
│     (fixed to: 0.05)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.left-hand-position options ───────────────────────╮
│ Hand positions (for hand-eye coordination)                                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.left-hand-position.func {fixed}                  │
│     (fixed to: functools.partial(<function hand_position at                │
│     0x73d3c3dfaa20>, hand_name='left_wrist_yaw_link'))                     │
│ --env.observations.policy.left-hand-position.params {fixed}                │
│     (fixed to: {})                                                         │
│ --env.observations.policy.left-hand-position.clip {None}|{FLOAT FLOAT}     │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.left-hand-position.scale {fixed}                 │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.left-hand-position.delay-min-lag INT             │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.left-hand-position.delay-max-lag INT             │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.left-hand-position.delay-per-env {True,False}    │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.left-hand-position.delay-hold-prob FLOAT         │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.left-hand-position.delay-update-period INT       │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.left-hand-position.delay-per-env-phase           │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.left-hand-position.history-length INT            │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.left-hand-position.flatten-history-dim           │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.right-hand-position options ──────────────────────╮
│ Hand positions (for hand-eye coordination)                                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.right-hand-position.func {fixed}                 │
│     (fixed to: functools.partial(<function hand_position at                │
│     0x73d3c3dfaa20>, hand_name='right_wrist_yaw_link'))                    │
│ --env.observations.policy.right-hand-position.params {fixed}               │
│     (fixed to: {})                                                         │
│ --env.observations.policy.right-hand-position.clip {None}|{FLOAT FLOAT}    │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.right-hand-position.scale {fixed}                │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.right-hand-position.delay-min-lag INT            │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.right-hand-position.delay-max-lag INT            │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.right-hand-position.delay-per-env {True,False}   │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.right-hand-position.delay-hold-prob FLOAT        │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.right-hand-position.delay-update-period INT      │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.right-hand-position.delay-per-env-phase          │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.right-hand-position.history-length INT           │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.right-hand-position.flatten-history-dim          │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.goal-scored options ──────────────────────────────╮
│ Goal detection and contact observations (1D each)                          │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.goal-scored.func {fixed}                         │
│     (fixed to: <function goal_scored_detection at 0x73d3c3dfa8e0>)         │
│ --env.observations.policy.goal-scored.params {fixed}                       │
│     (fixed to: {})                                                         │
│ --env.observations.policy.goal-scored.clip {None}|{FLOAT FLOAT}            │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.goal-scored.scale {fixed}                        │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.goal-scored.delay-min-lag INT                    │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.goal-scored.delay-max-lag INT                    │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.goal-scored.delay-per-env {True,False}           │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.goal-scored.delay-hold-prob FLOAT                │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.goal-scored.delay-update-period INT              │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.goal-scored.delay-per-env-phase {True,False}     │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.goal-scored.history-length INT                   │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.goal-scored.flatten-history-dim {True,False}     │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.policy.robot-ball-contact options ───────────────────────╮
│ Goal detection and contact observations (1D each)                          │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.policy.robot-ball-contact.func {fixed}                  │
│     (fixed to: functools.partial(<function robot_ball_contact at           │
│     0x73d3c3dfa980>, threshold=0.5))                                       │
│ --env.observations.policy.robot-ball-contact.params {fixed}                │
│     (fixed to: {})                                                         │
│ --env.observations.policy.robot-ball-contact.clip {None}|{FLOAT FLOAT}     │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.policy.robot-ball-contact.scale {fixed}                 │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.policy.robot-ball-contact.delay-min-lag INT             │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.policy.robot-ball-contact.delay-max-lag INT             │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.policy.robot-ball-contact.delay-per-env {True,False}    │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.policy.robot-ball-contact.delay-hold-prob FLOAT         │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.policy.robot-ball-contact.delay-update-period INT       │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.policy.robot-ball-contact.delay-per-env-phase           │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.policy.robot-ball-contact.history-length INT            │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.policy.robot-ball-contact.flatten-history-dim           │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic options ──────────────────────────────────────────╮
│ --env.observations.critic.concatenate-terms {True,False}                   │
│     (default: True)                                                        │
│ --env.observations.critic.concatenate-dim INT                              │
│     (default: -1)                                                          │
│ --env.observations.critic.enable-corruption {True,False}                   │
│     (default: False)                                                       │
│ --env.observations.critic.history-length {None}|INT                        │
│     (default: None)                                                        │
│ --env.observations.critic.flatten-history-dim {True,False}                 │
│     (default: True)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.base-lin-vel options ─────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.base-lin-vel.func {fixed}                        │
│     (fixed to: <function base_lin_vel at 0x73d3ce9e82c0>)                  │
│ --env.observations.critic.base-lin-vel.params {fixed}                      │
│     (fixed to: {})                                                         │
│ --env.observations.critic.base-lin-vel.clip {None}|{FLOAT FLOAT}           │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.base-lin-vel.scale {fixed}                       │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.base-lin-vel.delay-min-lag INT                   │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.base-lin-vel.delay-max-lag INT                   │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.base-lin-vel.delay-per-env {True,False}          │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.base-lin-vel.delay-hold-prob FLOAT               │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.base-lin-vel.delay-update-period INT             │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.base-lin-vel.delay-per-env-phase {True,False}    │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.base-lin-vel.history-length INT                  │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.base-lin-vel.flatten-history-dim {True,False}    │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.base-lin-vel.noise options ───────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.base-lin-vel.noise.operation {add,scale,abs}     │
│     (default: add)                                                         │
│ --env.observations.critic.base-lin-vel.noise.n-min {fixed}                 │
│     (fixed to: -0.1)                                                       │
│ --env.observations.critic.base-lin-vel.noise.n-max {fixed}                 │
│     (fixed to: 0.1)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.base-ang-vel options ─────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.base-ang-vel.func {fixed}                        │
│     (fixed to: <function base_ang_vel at 0x73d3ce9e8360>)                  │
│ --env.observations.critic.base-ang-vel.params {fixed}                      │
│     (fixed to: {})                                                         │
│ --env.observations.critic.base-ang-vel.clip {None}|{FLOAT FLOAT}           │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.base-ang-vel.scale {fixed}                       │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.base-ang-vel.delay-min-lag INT                   │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.base-ang-vel.delay-max-lag INT                   │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.base-ang-vel.delay-per-env {True,False}          │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.base-ang-vel.delay-hold-prob FLOAT               │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.base-ang-vel.delay-update-period INT             │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.base-ang-vel.delay-per-env-phase {True,False}    │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.base-ang-vel.history-length INT                  │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.base-ang-vel.flatten-history-dim {True,False}    │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.base-ang-vel.noise options ───────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.base-ang-vel.noise.operation {add,scale,abs}     │
│     (default: add)                                                         │
│ --env.observations.critic.base-ang-vel.noise.n-min {fixed}                 │
│     (fixed to: -0.2)                                                       │
│ --env.observations.critic.base-ang-vel.noise.n-max {fixed}                 │
│     (fixed to: 0.2)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.projected-gravity options ────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.projected-gravity.func {fixed}                   │
│     (fixed to: <function projected_gravity at 0x73d3ce9e8400>)             │
│ --env.observations.critic.projected-gravity.params {fixed}                 │
│     (fixed to: {})                                                         │
│ --env.observations.critic.projected-gravity.clip {None}|{FLOAT FLOAT}      │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.projected-gravity.scale {fixed}                  │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.projected-gravity.delay-min-lag INT              │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.projected-gravity.delay-max-lag INT              │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.projected-gravity.delay-per-env {True,False}     │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.projected-gravity.delay-hold-prob FLOAT          │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.projected-gravity.delay-update-period INT        │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.projected-gravity.delay-per-env-phase            │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.projected-gravity.history-length INT             │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.projected-gravity.flatten-history-dim            │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.projected-gravity.noise options ──────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.projected-gravity.noise.operation                │
│ {add,scale,abs}                                                            │
│     (default: add)                                                         │
│ --env.observations.critic.projected-gravity.noise.n-min {fixed}            │
│     (fixed to: -0.05)                                                      │
│ --env.observations.critic.projected-gravity.noise.n-max {fixed}            │
│     (fixed to: 0.05)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.joint-pos options ────────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.joint-pos.func {fixed}                           │
│     (fixed to: <function joint_pos_rel at 0x73d3ce9e84a0>)                 │
│ --env.observations.critic.joint-pos.params {fixed}                         │
│     (fixed to: {})                                                         │
│ --env.observations.critic.joint-pos.clip {None}|{FLOAT FLOAT}              │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.joint-pos.scale {fixed}                          │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.joint-pos.delay-min-lag INT                      │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.joint-pos.delay-max-lag INT                      │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.joint-pos.delay-per-env {True,False}             │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.joint-pos.delay-hold-prob FLOAT                  │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.joint-pos.delay-update-period INT                │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.joint-pos.delay-per-env-phase {True,False}       │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.joint-pos.history-length INT                     │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.joint-pos.flatten-history-dim {True,False}       │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.joint-pos.noise options ──────────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.joint-pos.noise.operation {add,scale,abs}        │
│     (default: add)                                                         │
│ --env.observations.critic.joint-pos.noise.n-min {fixed}                    │
│     (fixed to: -0.01)                                                      │
│ --env.observations.critic.joint-pos.noise.n-max {fixed}                    │
│     (fixed to: 0.01)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.joint-vel options ────────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.joint-vel.func {fixed}                           │
│     (fixed to: <function joint_vel_rel at 0x73d3ce9e8540>)                 │
│ --env.observations.critic.joint-vel.params {fixed}                         │
│     (fixed to: {})                                                         │
│ --env.observations.critic.joint-vel.clip {None}|{FLOAT FLOAT}              │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.joint-vel.scale {fixed}                          │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.joint-vel.delay-min-lag INT                      │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.joint-vel.delay-max-lag INT                      │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.joint-vel.delay-per-env {True,False}             │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.joint-vel.delay-hold-prob FLOAT                  │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.joint-vel.delay-update-period INT                │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.joint-vel.delay-per-env-phase {True,False}       │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.joint-vel.history-length INT                     │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.joint-vel.flatten-history-dim {True,False}       │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.joint-vel.noise options ──────────────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.joint-vel.noise.operation {add,scale,abs}        │
│     (default: add)                                                         │
│ --env.observations.critic.joint-vel.noise.n-min {fixed}                    │
│     (fixed to: -1.5)                                                       │
│ --env.observations.critic.joint-vel.noise.n-max {fixed}                    │
│     (fixed to: 1.5)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.actions options ──────────────────────────────────╮
│ Configuration for an observation term.                                     │
│ Processing pipeline: compute → noise → clip → scale → delay → history.     │
│ Delay models sensor latency. History provides temporal context. Both are   │
│ optional                                                                   │
│ and can be combined.                                                       │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.actions.func {fixed}                             │
│     (fixed to: <function last_action at 0x73d3ce9e85e0>)                   │
│ --env.observations.critic.actions.params {fixed}                           │
│     (fixed to: {})                                                         │
│ --env.observations.critic.actions.clip {None}|{FLOAT FLOAT}                │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.actions.scale {fixed}                            │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.actions.delay-min-lag INT                        │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.actions.delay-max-lag INT                        │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.actions.delay-per-env {True,False}               │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.actions.delay-hold-prob FLOAT                    │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.actions.delay-update-period INT                  │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.actions.delay-per-env-phase {True,False}         │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.actions.history-length INT                       │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.actions.flatten-history-dim {True,False}         │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.football-position options ────────────────────────╮
│ Football observations (primary ball for goalkeeper training) Add small     │
│ noise for robustness (simulates vision system uncertainty)                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.football-position.func {fixed}                   │
│     (fixed to: <function entity_position at 0x73d3c3dfa480>)               │
│ --env.observations.critic.football-position.clip {None}|{FLOAT FLOAT}      │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.football-position.scale {fixed}                  │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.football-position.delay-min-lag INT              │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.football-position.delay-max-lag INT              │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.football-position.delay-per-env {True,False}     │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.football-position.delay-hold-prob FLOAT          │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.football-position.delay-update-period INT        │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.football-position.delay-per-env-phase            │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.football-position.history-length INT             │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.football-position.flatten-history-dim            │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.football-position.params.asset-cfg options ───────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.football-position.params.asset-cfg.name STR      │
│     The name of the entity in the scene. (default: football_ball)          │
│ --env.observations.critic.football-position.params.asset-cfg.joint-names   │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of joints to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.critic.football-position.params.asset-cfg.joint-ids     │
│ {fixed}                                                                    │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-position.params.asset-cfg.body-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.critic.football-position.params.asset-cfg.body-ids      │
│ {fixed}                                                                    │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-position.params.asset-cfg.geom-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.observations.critic.football-position.params.asset-cfg.geom-ids      │
│ {fixed}                                                                    │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-position.params.asset-cfg.site-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.observations.critic.football-position.params.asset-cfg.site-ids      │
│ {fixed}                                                                    │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-position.params.asset-cfg.preserve-orde │
│ r {True,False}                                                             │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.football-position.noise options ──────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.football-position.noise.operation                │
│ {add,scale,abs}                                                            │
│     (default: add)                                                         │
│ --env.observations.critic.football-position.noise.n-min {fixed}            │
│     (fixed to: -0.02)                                                      │
│ --env.observations.critic.football-position.noise.n-max {fixed}            │
│     (fixed to: 0.02)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.football-velocity options ────────────────────────╮
│ Football observations (primary ball for goalkeeper training) Add small     │
│ noise for robustness (simulates vision system uncertainty)                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.football-velocity.func {fixed}                   │
│     (fixed to: <function entity_velocity at 0x73d3c3dfa520>)               │
│ --env.observations.critic.football-velocity.clip {None}|{FLOAT FLOAT}      │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.football-velocity.scale {fixed}                  │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.football-velocity.delay-min-lag INT              │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.football-velocity.delay-max-lag INT              │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.football-velocity.delay-per-env {True,False}     │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.football-velocity.delay-hold-prob FLOAT          │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.football-velocity.delay-update-period INT        │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.football-velocity.delay-per-env-phase            │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.football-velocity.history-length INT             │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.football-velocity.flatten-history-dim            │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.football-velocity.params.asset-cfg options ───────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.football-velocity.params.asset-cfg.name STR      │
│     The name of the entity in the scene. (default: football_ball)          │
│ --env.observations.critic.football-velocity.params.asset-cfg.joint-names   │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of joints to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.critic.football-velocity.params.asset-cfg.joint-ids     │
│ {fixed}                                                                    │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-velocity.params.asset-cfg.body-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.observations.critic.football-velocity.params.asset-cfg.body-ids      │
│ {fixed}                                                                    │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-velocity.params.asset-cfg.geom-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.observations.critic.football-velocity.params.asset-cfg.geom-ids      │
│ {fixed}                                                                    │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-velocity.params.asset-cfg.site-names    │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.observations.critic.football-velocity.params.asset-cfg.site-ids      │
│ {fixed}                                                                    │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.observations.critic.football-velocity.params.asset-cfg.preserve-orde │
│ r {True,False}                                                             │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.football-velocity.noise options ──────────────────╮
│ Noise model to apply to the observation.                                   │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.football-velocity.noise.operation                │
│ {add,scale,abs}                                                            │
│     (default: add)                                                         │
│ --env.observations.critic.football-velocity.noise.n-min {fixed}            │
│     (fixed to: -0.05)                                                      │
│ --env.observations.critic.football-velocity.noise.n-max {fixed}            │
│     (fixed to: 0.05)                                                       │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.left-hand-position options ───────────────────────╮
│ Hand positions (for hand-eye coordination)                                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.left-hand-position.func {fixed}                  │
│     (fixed to: functools.partial(<function hand_position at                │
│     0x73d3c3dfaa20>, hand_name='left_wrist_yaw_link'))                     │
│ --env.observations.critic.left-hand-position.params {fixed}                │
│     (fixed to: {})                                                         │
│ --env.observations.critic.left-hand-position.clip {None}|{FLOAT FLOAT}     │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.left-hand-position.scale {fixed}                 │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.left-hand-position.delay-min-lag INT             │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.left-hand-position.delay-max-lag INT             │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.left-hand-position.delay-per-env {True,False}    │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.left-hand-position.delay-hold-prob FLOAT         │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.left-hand-position.delay-update-period INT       │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.left-hand-position.delay-per-env-phase           │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.left-hand-position.history-length INT            │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.left-hand-position.flatten-history-dim           │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.right-hand-position options ──────────────────────╮
│ Hand positions (for hand-eye coordination)                                 │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.right-hand-position.func {fixed}                 │
│     (fixed to: functools.partial(<function hand_position at                │
│     0x73d3c3dfaa20>, hand_name='right_wrist_yaw_link'))                    │
│ --env.observations.critic.right-hand-position.params {fixed}               │
│     (fixed to: {})                                                         │
│ --env.observations.critic.right-hand-position.clip {None}|{FLOAT FLOAT}    │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.right-hand-position.scale {fixed}                │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.right-hand-position.delay-min-lag INT            │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.right-hand-position.delay-max-lag INT            │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.right-hand-position.delay-per-env {True,False}   │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.right-hand-position.delay-hold-prob FLOAT        │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.right-hand-position.delay-update-period INT      │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.right-hand-position.delay-per-env-phase          │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.right-hand-position.history-length INT           │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.right-hand-position.flatten-history-dim          │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.goal-scored options ──────────────────────────────╮
│ Goal detection and contact observations (1D each)                          │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.goal-scored.func {fixed}                         │
│     (fixed to: <function goal_scored_detection at 0x73d3c3dfa8e0>)         │
│ --env.observations.critic.goal-scored.params {fixed}                       │
│     (fixed to: {})                                                         │
│ --env.observations.critic.goal-scored.clip {None}|{FLOAT FLOAT}            │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.goal-scored.scale {fixed}                        │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.goal-scored.delay-min-lag INT                    │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.goal-scored.delay-max-lag INT                    │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.goal-scored.delay-per-env {True,False}           │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.goal-scored.delay-hold-prob FLOAT                │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.goal-scored.delay-update-period INT              │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.goal-scored.delay-per-env-phase {True,False}     │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.goal-scored.history-length INT                   │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.goal-scored.flatten-history-dim {True,False}     │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.observations.critic.robot-ball-contact options ───────────────────────╮
│ Goal detection and contact observations (1D each)                          │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.observations.critic.robot-ball-contact.func {fixed}                  │
│     (fixed to: functools.partial(<function robot_ball_contact at           │
│     0x73d3c3dfa980>, threshold=0.5))                                       │
│ --env.observations.critic.robot-ball-contact.params {fixed}                │
│     (fixed to: {})                                                         │
│ --env.observations.critic.robot-ball-contact.clip {None}|{FLOAT FLOAT}     │
│     Range (min, max) to clip the observation values. (default: None)       │
│ --env.observations.critic.robot-ball-contact.scale {fixed}                 │
│     Scaling factor(s) to multiply the observation by. (fixed to: None)     │
│ --env.observations.critic.robot-ball-contact.delay-min-lag INT             │
│     Minimum lag (in steps) for delayed observations. Lag sampled uniformly │
│     from                                                                   │
│     [min_lag, max_lag]. Convert to ms: lag * (1000 / control_hz).          │
│     (default: 0)                                                           │
│ --env.observations.critic.robot-ball-contact.delay-max-lag INT             │
│     Maximum lag (in steps) for delayed observations. Use min=max for       │
│     constant delay. (default: 0)                                           │
│ --env.observations.critic.robot-ball-contact.delay-per-env {True,False}    │
│     If True, each environment samples its own lag. If False, all           │
│     environments share                                                     │
│     the same lag at each step. (default: True)                             │
│ --env.observations.critic.robot-ball-contact.delay-hold-prob FLOAT         │
│     Probability of reusing the previous lag instead of resampling. Useful  │
│     for                                                                    │
│     temporally correlated latency patterns. (default: 0.0)                 │
│ --env.observations.critic.robot-ball-contact.delay-update-period INT       │
│     Resample lag every N steps (models multi-rate sensors). If 0, update   │
│     every step. (default: 0)                                               │
│ --env.observations.critic.robot-ball-contact.delay-per-env-phase           │
│ {True,False}                                                               │
│     If True and update_period > 0, stagger update timing across envs to    │
│     avoid                                                                  │
│     synchronized resampling. (default: True)                               │
│ --env.observations.critic.robot-ball-contact.history-length INT            │
│     Number of past observations to keep in history. 0 = no history.        │
│     (default: 0)                                                           │
│ --env.observations.critic.robot-ball-contact.flatten-history-dim           │
│ {True,False}                                                               │
│     Whether to flatten the history dimension into observation. (default:   │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.actions.joint-pos options ────────────────────────────────────────────╮
│ --env.actions.joint-pos.class-type {fixed}                                 │
│     (fixed to: <class                                                      │
│     'mjlab.envs.mdp.actions.joint_actions.JointPositionAction'>)           │
│ --env.actions.joint-pos.asset-name STR                                     │
│     (default: robot)                                                       │
│ --env.actions.joint-pos.clip {None}|{[STR [STR [STR ...]] [STR [STR [STR   │
│ ...]] ...]]}                                                               │
│     (default: None)                                                        │
│ --env.actions.joint-pos.actuator-names [STR [STR ...]]                     │
│     List of actuator names or regex expressions that the action will be    │
│     mapped to. (default: '.*')                                             │
│ --env.actions.joint-pos.scale FLOAT|{[STR FLOAT [STR FLOAT ...]]}          │
│     Scale factor for the action (float or dict of regex expressions).      │
│     Defaults to 1.0. (default: '.*_elbow_joint' 0.43857731392336724        │
│     '.*_shoulder_pitch_joint' 0.43857731392336724 '.*_shoulder_roll_joint' │
│     0.43857731392336724 '.*_shoulder_yaw_joint' 0.43857731392336724        │
│     '.*_wrist_roll_joint' 0.43857731392336724 '.*_hip_pitch_joint'         │
│     0.5475464629911068 '.*_hip_yaw_joint' 0.5475464629911068               │
│     waist_yaw_joint 0.5475464629911068 '.*_hip_roll_joint'                 │
│     0.35066146637882434 '.*_knee_joint' 0.35066146637882434                │
│     '.*_wrist_pitch_joint' 0.07450087032950714 '.*_wrist_yaw_joint'        │
│     0.07450087032950714 waist_pitch_joint 0.43857731392336724              │
│     waist_roll_joint 0.43857731392336724 '.*_ankle_pitch_joint'            │
│     0.43857731392336724 '.*_ankle_roll_joint' 0.43857731392336724)         │
│ --env.actions.joint-pos.offset FLOAT|{[STR FLOAT [STR FLOAT ...]]}         │
│     Offset factor for the action (float or dict of regex expressions).     │
│     Defaults to 0.0. (default: 0.0)                                        │
│ --env.actions.joint-pos.preserve-order {True,False}                        │
│     Whether to preserve the order of the joint names in the action output. │
│     Defaults to False. (default: False)                                    │
│ --env.actions.joint-pos.use-default-offset {True,False}                    │
│     (default: True)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.reset-base options ────────────────────────────────────────────╮
│ Configuration for an event term.                                           │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.reset-base.func {fixed}                                       │
│     (fixed to: <function reset_robot_on_goal_line at 0x73d3c3dfa160>)      │
│ --env.events.reset-base.mode {startup,reset,interval}                      │
│     (default: reset)                                                       │
│ --env.events.reset-base.interval-range-s {None}|{FLOAT FLOAT}              │
│     (default: None)                                                        │
│ --env.events.reset-base.is-global-time {True,False}                        │
│     (default: False)                                                       │
│ --env.events.reset-base.min-step-count-between-reset INT                   │
│     (default: 0)                                                           │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.reset-base.params options ─────────────────────────────────────╮
│ --env.events.reset-base.params.x-std FLOAT                                 │
│     (default: 0.5)                                                         │
│ --env.events.reset-base.params.yaw-range [FLOAT [FLOAT ...]]               │
│     (default: -0.1 0.1)                                                    │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.reset-base.params.asset-cfg options ───────────────────────────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.reset-base.params.asset-cfg.name STR                          │
│     The name of the entity in the scene. (default: robot)                  │
│ --env.events.reset-base.params.asset-cfg.joint-names {None}|STR|{[STR [STR │
│ ...]]}                                                                     │
│     Names of joints to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.events.reset-base.params.asset-cfg.joint-ids {fixed}                 │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.events.reset-base.params.asset-cfg.body-names {None}|STR|{[STR [STR  │
│ ...]]}                                                                     │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.events.reset-base.params.asset-cfg.body-ids {fixed}                  │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.events.reset-base.params.asset-cfg.geom-names {None}|STR|{[STR [STR  │
│ ...]]}                                                                     │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.events.reset-base.params.asset-cfg.geom-ids {fixed}                  │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.events.reset-base.params.asset-cfg.site-names {None}|STR|{[STR [STR  │
│ ...]]}                                                                     │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.events.reset-base.params.asset-cfg.site-ids {fixed}                  │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.events.reset-base.params.asset-cfg.preserve-order {True,False}       │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.reset-robot-joints options ────────────────────────────────────╮
│ Configuration for an event term.                                           │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.reset-robot-joints.func {fixed}                               │
│     (fixed to: <function reset_joints_by_scale at 0x73d3fa7c87c0>)         │
│ --env.events.reset-robot-joints.mode {startup,reset,interval}              │
│     (default: reset)                                                       │
│ --env.events.reset-robot-joints.interval-range-s {None}|{FLOAT FLOAT}      │
│     (default: None)                                                        │
│ --env.events.reset-robot-joints.is-global-time {True,False}                │
│     (default: False)                                                       │
│ --env.events.reset-robot-joints.min-step-count-between-reset INT           │
│     (default: 0)                                                           │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.reset-robot-joints.params options ─────────────────────────────╮
│ --env.events.reset-robot-joints.params.position-range [FLOAT [FLOAT ...]]  │
│     (default: 1.0 1.0)                                                     │
│ --env.events.reset-robot-joints.params.velocity-range [FLOAT [FLOAT ...]]  │
│     (default: 0.0 0.0)                                                     │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.reset-robot-joints.params.asset-cfg options ───────────────────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.reset-robot-joints.params.asset-cfg.name STR                  │
│     The name of the entity in the scene. (default: robot)                  │
│ --env.events.reset-robot-joints.params.asset-cfg.joint-names               │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of joints to include. Can be a single string or list. (default:  │
│     '.*')                                                                  │
│ --env.events.reset-robot-joints.params.asset-cfg.joint-ids {fixed}         │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.events.reset-robot-joints.params.asset-cfg.body-names                │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.events.reset-robot-joints.params.asset-cfg.body-ids {fixed}          │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.events.reset-robot-joints.params.asset-cfg.geom-names                │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.events.reset-robot-joints.params.asset-cfg.geom-ids {fixed}          │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.events.reset-robot-joints.params.asset-cfg.site-names                │
│ {None}|STR|{[STR [STR ...]]}                                               │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.events.reset-robot-joints.params.asset-cfg.site-ids {fixed}          │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.events.reset-robot-joints.params.asset-cfg.preserve-order            │
│ {True,False}                                                               │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.push-robot options ────────────────────────────────────────────╮
│ Configuration for an event term.                                           │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.push-robot.func {fixed}                                       │
│     (fixed to: <function push_by_setting_velocity at 0x73d3fa7c8860>)      │
│ --env.events.push-robot.mode {startup,reset,interval}                      │
│     (default: interval)                                                    │
│ --env.events.push-robot.interval-range-s {None}|{FLOAT FLOAT}              │
│     (default: 5.0 10.0)                                                    │
│ --env.events.push-robot.is-global-time {True,False}                        │
│     (default: False)                                                       │
│ --env.events.push-robot.min-step-count-between-reset INT                   │
│     (default: 0)                                                           │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.push-robot.params.velocity-range options ──────────────────────╮
│ --env.events.push-robot.params.velocity-range.x [FLOAT [FLOAT ...]]        │
│     (default: -0.5 0.5)                                                    │
│ --env.events.push-robot.params.velocity-range.y [FLOAT [FLOAT ...]]        │
│     (default: -0.5 0.5)                                                    │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.foot-friction options ─────────────────────────────────────────╮
│ Configuration for an event term.                                           │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.foot-friction.func {fixed}                                    │
│     (fixed to: <function randomize_field at 0x73d3ce9d7d80>)               │
│ --env.events.foot-friction.mode {startup,reset,interval}                   │
│     (default: startup)                                                     │
│ --env.events.foot-friction.interval-range-s {None}|{FLOAT FLOAT}           │
│     (default: None)                                                        │
│ --env.events.foot-friction.is-global-time {True,False}                     │
│     (default: False)                                                       │
│ --env.events.foot-friction.min-step-count-between-reset INT                │
│     (default: 0)                                                           │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.foot-friction.params options ──────────────────────────────────╮
│ --env.events.foot-friction.params.operation STR                            │
│     (default: abs)                                                         │
│ --env.events.foot-friction.params.field STR                                │
│     (default: geom_friction)                                               │
│ --env.events.foot-friction.params.ranges [FLOAT [FLOAT ...]]               │
│     (default: 0.3 1.2)                                                     │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.events.foot-friction.params.asset-cfg options ────────────────────────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.events.foot-friction.params.asset-cfg.name STR                       │
│     The name of the entity in the scene. (default: robot)                  │
│ --env.events.foot-friction.params.asset-cfg.joint-names {None}|STR|{[STR   │
│ [STR ...]]}                                                                │
│     Names of joints to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.events.foot-friction.params.asset-cfg.joint-ids {fixed}              │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.events.foot-friction.params.asset-cfg.body-names {None}|STR|{[STR    │
│ [STR ...]]}                                                                │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.events.foot-friction.params.asset-cfg.body-ids {fixed}               │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.events.foot-friction.params.asset-cfg.geom-names {None}|STR|{[STR    │
│ [STR ...]]}                                                                │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: left_foot1_collision left_foot2_collision                    │
│     left_foot3_collision left_foot4_collision left_foot5_collision         │
│     left_foot6_collision left_foot7_collision right_foot1_collision        │
│     right_foot2_collision right_foot3_collision right_foot4_collision      │
│     right_foot5_collision right_foot6_collision right_foot7_collision)     │
│ --env.events.foot-friction.params.asset-cfg.geom-ids {fixed}               │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.events.foot-friction.params.asset-cfg.site-names {None}|STR|{[STR    │
│ [STR ...]]}                                                                │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.events.foot-friction.params.asset-cfg.site-ids {fixed}               │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.events.foot-friction.params.asset-cfg.preserve-order {True,False}    │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.sim options ──────────────────────────────────────────────────────────╮
│ --env.sim.nconmax {None}|INT                                               │
│     (default: 250000)                                                      │
│ --env.sim.njmax {None}|INT                                                 │
│     (default: 300)                                                         │
│ --env.sim.ls-parallel {True,False}                                         │
│     Boosts perf quite noticeably. (default: True)                          │
│ --env.sim.contact-sensor-maxmatch INT                                      │
│     (default: 64)                                                          │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.sim.mujoco options ───────────────────────────────────────────────────╮
│ Configuration for MuJoCo simulation parameters.                            │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.sim.mujoco.timestep FLOAT                                            │
│     Integrator settings. (default: 0.005)                                  │
│ --env.sim.mujoco.integrator {euler,implicitfast}                           │
│     Integrator settings. (default: implicitfast)                           │
│ --env.sim.mujoco.impratio FLOAT                                            │
│     Friction settings. (default: 1.0)                                      │
│ --env.sim.mujoco.cone {pyramidal,elliptic}                                 │
│     Friction settings. (default: pyramidal)                                │
│ --env.sim.mujoco.jacobian {auto,dense,sparse}                              │
│     Solver settings. (default: auto)                                       │
│ --env.sim.mujoco.solver {newton,cg,pgs}                                    │
│     Solver settings. (default: newton)                                     │
│ --env.sim.mujoco.iterations INT                                            │
│     Solver settings. (default: 10)                                         │
│ --env.sim.mujoco.tolerance FLOAT                                           │
│     Solver settings. (default: 1e-08)                                      │
│ --env.sim.mujoco.ls-iterations INT                                         │
│     Solver settings. (default: 20)                                         │
│ --env.sim.mujoco.ls-tolerance FLOAT                                        │
│     Solver settings. (default: 0.01)                                       │
│ --env.sim.mujoco.gravity FLOAT FLOAT FLOAT                                 │
│     Other. (default: 0 0 -9.81)                                            │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.sim.nan-guard options ────────────────────────────────────────────────╮
│ Configuration for NaN guard.                                               │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.sim.nan-guard.enabled {True,False}                                   │
│     (default: False)                                                       │
│ --env.sim.nan-guard.buffer-size INT                                        │
│     (default: 100)                                                         │
│ --env.sim.nan-guard.output-dir STR                                         │
│     (default: /tmp/mjlab/nan_dumps)                                        │
│ --env.sim.nan-guard.max-envs-to-dump INT                                   │
│     (default: 5)                                                           │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.viewer options ───────────────────────────────────────────────────────╮
│ --env.viewer.lookat FLOAT FLOAT FLOAT                                      │
│     (default: 0.0 0.0 0.0)                                                 │
│ --env.viewer.distance FLOAT                                                │
│     (default: 3.0)                                                         │
│ --env.viewer.elevation FLOAT                                               │
│     (default: -5.0)                                                        │
│ --env.viewer.azimuth FLOAT                                                 │
│     (default: 90.0)                                                        │
│ --env.viewer.origin-type {WORLD,ASSET_ROOT,ASSET_BODY}                     │
│     (default: ASSET_BODY)                                                  │
│ --env.viewer.asset-name {None}|STR                                         │
│     (default: robot)                                                       │
│ --env.viewer.body-name {None}|STR                                          │
│     (default: torso_link)                                                  │
│ --env.viewer.env-idx INT                                                   │
│     (default: 0)                                                           │
│ --env.viewer.enable-reflections {True,False}                               │
│     (default: True)                                                        │
│ --env.viewer.enable-shadows {True,False}                                   │
│     (default: True)                                                        │
│ --env.viewer.height INT                                                    │
│     (default: 240)                                                         │
│ --env.viewer.width INT                                                     │
│     (default: 320)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.pose options ─────────────────────────────────────────────────╮
│ Standard regularizers (from velocity task best practices)                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.pose.func {fixed}                                            │
│     (fixed to: <class 'mjlab.envs.mdp.rewards.posture'>)                   │
│ --env.rewards.pose.weight FLOAT                                            │
│     (default: 1.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.pose.params.asset-cfg options ────────────────────────────────╮
│ Configuration for a scene entity that is used by the manager's term.       │
│ This configuration allows flexible specification of entity components      │
│ either by name                                                             │
│ or by ID. During resolution, it ensures consistency between names and IDs, │
│ and can                                                                    │
│ optimize to slice(None) when all components are selected.                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.pose.params.asset-cfg.name STR                               │
│     The name of the entity in the scene. (default: robot)                  │
│ --env.rewards.pose.params.asset-cfg.joint-names {None}|STR|{[STR [STR      │
│ ...]]}                                                                     │
│     Names of joints to include. Can be a single string or list. (default:  │
│     '.*')                                                                  │
│ --env.rewards.pose.params.asset-cfg.joint-ids {fixed}                      │
│     IDs of joints to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.rewards.pose.params.asset-cfg.body-names {None}|STR|{[STR [STR       │
│ ...]]}                                                                     │
│     Names of bodies to include. Can be a single string or list. (default:  │
│     None)                                                                  │
│ --env.rewards.pose.params.asset-cfg.body-ids {fixed}                       │
│     IDs of bodies to include. Can be a list or slice. (fixed to:           │
│     slice(None, None, None))                                               │
│ --env.rewards.pose.params.asset-cfg.geom-names {None}|STR|{[STR [STR       │
│ ...]]}                                                                     │
│     Names of geometries to include. Can be a single string or list.        │
│     (default: None)                                                        │
│ --env.rewards.pose.params.asset-cfg.geom-ids {fixed}                       │
│     IDs of geometries to include. Can be a list or slice. (fixed to:       │
│     slice(None, None, None))                                               │
│ --env.rewards.pose.params.asset-cfg.site-names {None}|STR|{[STR [STR       │
│ ...]]}                                                                     │
│     Names of sites to include. Can be a single string or list. (default:   │
│     None)                                                                  │
│ --env.rewards.pose.params.asset-cfg.site-ids {fixed}                       │
│     IDs of sites to include. Can be a list or slice. (fixed to:            │
│     slice(None, None, None))                                               │
│ --env.rewards.pose.params.asset-cfg.preserve-order {True,False}            │
│     If True, maintains the order of components as specified. If False,     │
│     allows reordering for optimization. (default: False)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.pose.params.std options ──────────────────────────────────────╮
│ --env.rewards.pose.params.std.*hip-pitch.* FLOAT                           │
│     (default: 0.3)                                                         │
│ --env.rewards.pose.params.std.*hip-roll.* FLOAT                            │
│     (default: 0.15)                                                        │
│ --env.rewards.pose.params.std.*hip-yaw.* FLOAT                             │
│     (default: 0.15)                                                        │
│ --env.rewards.pose.params.std.*knee.* FLOAT                                │
│     (default: 0.35)                                                        │
│ --env.rewards.pose.params.std.*ankle-pitch.* FLOAT                         │
│     (default: 0.25)                                                        │
│ --env.rewards.pose.params.std.*ankle-roll.* FLOAT                          │
│     (default: 0.1)                                                         │
│ --env.rewards.pose.params.std.*waist-yaw.* FLOAT                           │
│     (default: 0.15)                                                        │
│ --env.rewards.pose.params.std.*waist-roll.* FLOAT                          │
│     (default: 0.08)                                                        │
│ --env.rewards.pose.params.std.*waist-pitch.* FLOAT                         │
│     (default: 0.1)                                                         │
│ --env.rewards.pose.params.std.*shoulder-pitch.* FLOAT                      │
│     (default: 0.35)                                                        │
│ --env.rewards.pose.params.std.*shoulder-roll.* FLOAT                       │
│     (default: 0.15)                                                        │
│ --env.rewards.pose.params.std.*shoulder-yaw.* FLOAT                        │
│     (default: 0.1)                                                         │
│ --env.rewards.pose.params.std.*elbow.* FLOAT                               │
│     (default: 0.25)                                                        │
│ --env.rewards.pose.params.std.*wrist.* FLOAT                               │
│     (default: 0.3)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.dof-pos-limits options ───────────────────────────────────────╮
│ Standard regularizers (from velocity task best practices)                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.dof-pos-limits.func {fixed}                                  │
│     (fixed to: <function joint_pos_limits at 0x73d3ce9e8b80>)              │
│ --env.rewards.dof-pos-limits.params {fixed}                                │
│     (fixed to: {})                                                         │
│ --env.rewards.dof-pos-limits.weight FLOAT                                  │
│     (default: -1.0)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.action-rate-l2 options ───────────────────────────────────────╮
│ Standard regularizers (from velocity task best practices)                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.action-rate-l2.func {fixed}                                  │
│     (fixed to: <function action_rate_l2 at 0x73d3ce9e8ae0>)                │
│ --env.rewards.action-rate-l2.params {fixed}                                │
│     (fixed to: {})                                                         │
│ --env.rewards.action-rate-l2.weight FLOAT                                  │
│     (default: -0.1)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.joint-torques-l2 options ─────────────────────────────────────╮
│ Standard regularizers (from velocity task best practices)                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.joint-torques-l2.func {fixed}                                │
│     (fixed to: <function joint_torques_l2 at 0x73d3ce9e89a0>)              │
│ --env.rewards.joint-torques-l2.params {fixed}                              │
│     (fixed to: {})                                                         │
│ --env.rewards.joint-torques-l2.weight FLOAT                                │
│     (default: -0.0001)                                                     │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.flat-orientation options ─────────────────────────────────────╮
│ Standard regularizers (from velocity task best practices)                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.flat-orientation.func {fixed}                                │
│     (fixed to: <function flat_orientation_l2 at 0x73d3ce9e8e00>)           │
│ --env.rewards.flat-orientation.params {fixed}                              │
│     (fixed to: {})                                                         │
│ --env.rewards.flat-orientation.weight FLOAT                                │
│     (default: -0.5)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.alive options ────────────────────────────────────────────────╮
│ Staying alive/upright reward (continuous encouragement to not fall)        │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.alive.func {fixed}                                           │
│     (fixed to: <function is_alive at 0x73d3c3dfb2e0>)                      │
│ --env.rewards.alive.params {fixed}                                         │
│     (fixed to: {})                                                         │
│ --env.rewards.alive.weight FLOAT                                           │
│     (default: 1.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.hand-to-ball options ─────────────────────────────────────────╮
│ New goalkeeper-specific rewards                                            │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.hand-to-ball.func {fixed}                                    │
│     (fixed to: functools.partial(<function hand_to_ball_distance at        │
│     0x73d3c3dfb240>, std=0.3, left_hand_body='left_wrist_yaw_link',        │
│     right_hand_body='right_wrist_yaw_link'))                               │
│ --env.rewards.hand-to-ball.params {fixed}                                  │
│     (fixed to: {})                                                         │
│ --env.rewards.hand-to-ball.weight FLOAT                                    │
│     (default: 5.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.stabilization-after-contact options ──────────────────────────╮
│ New goalkeeper-specific rewards                                            │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.stabilization-after-contact.func {fixed}                     │
│     (fixed to: <class                                                      │
│     'mjlab_goalkeeper.mdp.rewards.post_contact_stabilization'>)            │
│ --env.rewards.stabilization-after-contact.weight FLOAT                     │
│     (default: 2.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.stabilization-after-contact.params options ───────────────────╮
│ --env.rewards.stabilization-after-contact.params.std FLOAT                 │
│     (default: 1.0)                                                         │
│ --env.rewards.stabilization-after-contact.params.contact-memory-steps INT  │
│     (default: 50)                                                          │
│ --env.rewards.stabilization-after-contact.params.contact-threshold FLOAT   │
│     (default: 0.5)                                                         │
│ --env.rewards.stabilization-after-contact.params.nominal-height FLOAT      │
│     (default: 0.76)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.active-save options ──────────────────────────────────────────╮
│ New goalkeeper-specific rewards                                            │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.active-save.func {fixed}                                     │
│     (fixed to: <class                                                      │
│     'mjlab_goalkeeper.mdp.rewards.goal_prevented_by_robot'>)               │
│ --env.rewards.active-save.weight FLOAT                                     │
│     (default: 10.0)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.active-save.params options ───────────────────────────────────╮
│ --env.rewards.active-save.params.contact-threshold FLOAT                   │
│     (default: 0.5)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.air-time options ─────────────────────────────────────────────╮
│ Unused, only here as an example.                                           │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.rewards.air-time.func {fixed}                                        │
│     (fixed to: <class 'mjlab.tasks.velocity.mdp.rewards.feet_air_time'>)   │
│ --env.rewards.air-time.weight FLOAT                                        │
│     (default: 0.0)                                                         │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.rewards.air-time.params options ──────────────────────────────────────╮
│ --env.rewards.air-time.params.asset-name STR                               │
│     (default: robot)                                                       │
│ --env.rewards.air-time.params.threshold-min FLOAT                          │
│     (default: 0.05)                                                        │
│ --env.rewards.air-time.params.threshold-max FLOAT                          │
│     (default: 0.15)                                                        │
│ --env.rewards.air-time.params.command-name STR                             │
│     (default: twist)                                                       │
│ --env.rewards.air-time.params.command-threshold FLOAT                      │
│     (default: 0.05)                                                        │
│ --env.rewards.air-time.params.sensor-names [STR [STR ...]]                 │
│     (default: left_foot_ground_contact right_foot_ground_contact)          │
│ --env.rewards.air-time.params.reward-mode STR                              │
│     (default: on_landing)                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.terminations.time-out options ────────────────────────────────────────╮
│ Configuration for a termination term.                                      │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.terminations.time-out.func {fixed}                                   │
│     (fixed to: <function time_out at 0x73d3ce9e8ea0>)                      │
│ --env.terminations.time-out.params {fixed}                                 │
│     (fixed to: {})                                                         │
│ --env.terminations.time-out.time-out {True,False}                          │
│     Whether the term contributes towards episodic timeouts. (default:      │
│     True)                                                                  │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.terminations.fell-over options ───────────────────────────────────────╮
│ Re-enabled - robot must learn to stay upright Combined with alive reward,  │
│ this creates strong incentive to not fall                                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.terminations.fell-over.func {fixed}                                  │
│     (fixed to: <function bad_orientation at 0x73d3ce9e8f40>)               │
│ --env.terminations.fell-over.time-out {True,False}                         │
│     Whether the term contributes towards episodic timeouts. (default:      │
│     False)                                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.terminations.fell-over.params options ────────────────────────────────╮
│ --env.terminations.fell-over.params.limit-angle FLOAT                      │
│     (default: 1.22)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.terminations.goal-scored options ─────────────────────────────────────╮
│ Configuration for a termination term.                                      │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.terminations.goal-scored.func {fixed}                                │
│     (fixed to: <function goal_scored_termination at 0x73d3c3dfac00>)       │
│ --env.terminations.goal-scored.params {fixed}                              │
│     (fixed to: {})                                                         │
│ --env.terminations.goal-scored.time-out {True,False}                       │
│     Whether the term contributes towards episodic timeouts. (default:      │
│     False)                                                                 │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.commands.penalty-kick options ────────────────────────────────────────╮
│ Configuration for penalty kick command term.                               │
│ This command shoots penalty kicks toward the goal from the penalty spot    │
│ with randomized target positions and velocities.                           │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.commands.penalty-kick.class-type {fixed}                             │
│     (fixed to: <class 'mjlab_goalkeeper.mdp.commands.PenaltyKickCommand'>) │
│ --env.commands.penalty-kick.resampling-time-range FLOAT FLOAT              │
│     (default: 8.0 12.0)                                                    │
│ --env.commands.penalty-kick.debug-vis {True,False}                         │
│     (default: True)                                                        │
│ --env.commands.penalty-kick.robot-name STR                                 │
│     Name of the robot entity. (default: robot)                             │
│ --env.commands.penalty-kick.football-name STR                              │
│     Name of the football entity. (default: football_ball)                  │
│ --env.commands.penalty-kick.goal-name STR                                  │
│     Name of the goal entity. (default: goal)                               │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.commands.penalty-kick.ranges options ─────────────────────────────────╮
│ Randomization ranges for kick parameters.                                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.commands.penalty-kick.ranges.target-x-offset FLOAT FLOAT             │
│     X offset from goal center (meters, left/right in goal). (default: -1.5 │
│     1.5)                                                                   │
│ --env.commands.penalty-kick.ranges.target-z-height FLOAT FLOAT             │
│     Z height from goal bottom (meters, vertical in goal). (default: 0.3    │
│     1.7)                                                                   │
│ --env.commands.penalty-kick.ranges.target-y-depth FLOAT FLOAT              │
│     Y offset from goal line (meters, depth into goal). (default: -0.8      │
│     -0.2)                                                                  │
│ --env.commands.penalty-kick.ranges.kick-time FLOAT FLOAT                   │
│     Time for ball to reach goal (seconds). (default: 1.2 2.0)              │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ env.commands.penalty-kick.viz options ────────────────────────────────────╮
│ Visualization settings.                                                    │
│ ────────────────────────────────────────────────────────────────────────── │
│ --env.commands.penalty-kick.viz.show-trajectory {True,False}               │
│     Whether to show the trajectory line. (default: True)                   │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ agent options ────────────────────────────────────────────────────────────╮
│ --agent.seed INT                                                           │
│     The seed for the experiment. Default is 42. (default: 42)              │
│ --agent.num-steps-per-env INT                                              │
│     The number of steps per environment update. (default: 24)              │
│ --agent.max-iterations INT                                                 │
│     The maximum number of iterations. (default: 30000)                     │
│ --agent.save-interval INT                                                  │
│     The number of iterations between saves. (default: 50)                  │
│ --agent.experiment-name STR                                                │
│     The experiment name. (default: goalkeeper)                             │
│ --agent.run-name STR                                                       │
│     The run name. Default is empty string. (default: '')                   │
│ --agent.logger {wandb,tensorboard}                                         │
│     The logger to use. Default is wandb. (default: wandb)                  │
│ --agent.wandb-project STR                                                  │
│     The wandb project name. (default: mjlab-goalkeeper)                    │
│ --agent.resume {True,False}                                                │
│     Whether to resume the experiment. Default is False. (default: False)   │
│ --agent.load-run STR                                                       │
│     The run directory to load. Default is ".*" which means all runs. If    │
│     regex                                                                  │
│     expression, the latest (alphabetical order) matching run will be       │
│     loaded. (default: '.*')                                                │
│ --agent.load-checkpoint STR                                                │
│     The checkpoint file to load. Default is "model_.*.pt" (all). If regex  │
│     expression,                                                            │
│     the latest (alphabetical order) matching file will be loaded.          │
│     (default: 'model_.*.pt')                                               │
│ --agent.clip-actions {None}|FLOAT                                          │
│     The clipping range for action values. If None (default), no clipping   │
│     is applied. (default: None)                                            │
│ --agent.class-name STR                                                     │
│     The runner class name. Default is OnPolicyRunner. (default:            │
│     OnPolicyRunner)                                                        │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ agent.obs-groups options ─────────────────────────────────────────────────╮
│ --agent.obs-groups.policy [STR [STR ...]]                                  │
│     (default: policy)                                                      │
│ --agent.obs-groups.critic [STR [STR ...]]                                  │
│     (default: policy critic)                                               │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ agent.policy options ─────────────────────────────────────────────────────╮
│ The policy configuration.                                                  │
│ ────────────────────────────────────────────────────────────────────────── │
│ --agent.policy.init-noise-std FLOAT                                        │
│     The initial noise standard deviation of the policy. (default: 1.0)     │
│ --agent.policy.noise-std-type {scalar,log}                                 │
│     The type of noise standard deviation for the policy. Default is        │
│     scalar. (default: scalar)                                              │
│ --agent.policy.actor-obs-normalization {True,False}                        │
│     Whether to normalize the observation for the actor network. Default is │
│     False. (default: False)                                                │
│ --agent.policy.critic-obs-normalization {True,False}                       │
│     Whether to normalize the observation for the critic network. Default   │
│     is False. (default: False)                                             │
│ --agent.policy.actor-hidden-dims [INT [INT ...]]                           │
│     The hidden dimensions of the actor network. (default: 512 256 128)     │
│ --agent.policy.critic-hidden-dims [INT [INT ...]]                          │
│     The hidden dimensions of the critic network. (default: 512 256 128)    │
│ --agent.policy.activation STR                                              │
│     The activation function to use in the actor and critic networks.       │
│     (default: elu)                                                         │
│ --agent.policy.class-name STR                                              │
│     Ignore, required by RSL-RL. (default: ActorCritic)                     │
╰────────────────────────────────────────────────────────────────────────────╯
╭─ agent.algorithm options ──────────────────────────────────────────────────╮
│ The algorithm configuration.                                               │
│ ────────────────────────────────────────────────────────────────────────── │
│ --agent.algorithm.num-learning-epochs INT                                  │
│     The number of learning epochs per update. (default: 5)                 │
│ --agent.algorithm.num-mini-batches INT                                     │
│     The number of mini-batches per update.                                 │
│     mini batch size = num_envs * num_steps / num_mini_batches (default: 4) │
│ --agent.algorithm.learning-rate FLOAT                                      │
│     The learning rate. (default: 0.001)                                    │
│ --agent.algorithm.schedule {adaptive,fixed}                                │
│     The learning rate schedule. (default: adaptive)                        │
│ --agent.algorithm.gamma FLOAT                                              │
│     The discount factor. (default: 0.99)                                   │
│ --agent.algorithm.lam FLOAT                                                │
│     The lambda parameter for Generalized Advantage Estimation (GAE).       │
│     (default: 0.95)                                                        │
│ --agent.algorithm.entropy-coef FLOAT                                       │
│     The coefficient for the entropy loss. (default: 0.01)                  │
│ --agent.algorithm.desired-kl FLOAT                                         │
│     The desired KL divergence between the new and old policies. (default:  │
│     0.01)                                                                  │
│ --agent.algorithm.max-grad-norm FLOAT                                      │
│     The maximum gradient norm for the policy. (default: 1.0)               │
│ --agent.algorithm.value-loss-coef FLOAT                                    │
│     The coefficient for the value loss. (default: 1.0)                     │
│ --agent.algorithm.use-clipped-value-loss {True,False}                      │
│     Whether to use clipped value loss. (default: True)                     │
│ --agent.algorithm.clip-param FLOAT                                         │
│     The clipping parameter for the policy. (default: 0.2)                  │
│ --agent.algorithm.normalize-advantage-per-mini-batch {True,False}          │
│     Whether to normalize the advantage per mini-batch. Default is False.   │
│     If True, the                                                           │
│     advantage is normalized over the mini-batches only. Otherwise, the     │
│     advantage is                                                           │
│     normalized over the entire collected trajectories. (default: False)    │
│ --agent.algorithm.class-name STR                                           │
│     Ignore, required by RSL-RL. (default: PPO)                             │
╰────────────────────────────────────────────────────────────────────────────╯
